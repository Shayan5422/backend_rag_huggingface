{
    "model_id": "THUDM/CogVideoX-5b-I2V",
    "downloads": 87126,
    "tags": [
        "diffusers",
        "safetensors",
        "cogvideox",
        "video-generation",
        "thudm",
        "image-to-video",
        "en",
        "arxiv:2408.06072",
        "license:other",
        "diffusers:CogVideoXImageToVideoPipeline",
        "region:us"
    ],
    "description": "--- license: other license_link: language: - en tags: - cogvideox - video-generation - thudm - image-to-video inference: false --- # CogVideoX-5B-I2V <p style=\"text-align: center;\"> <div align=\"center\"> <img src= width=\"50%\"/> </div> <p align=\"center\"> <a href=\" Read in English</a> | <a href=\" Huggingface Space</a> | <a href=\" Github </a> | <a href=\" arxiv </a> </p> <p align=\"center\"> üìç Visit <a href=\" and <a href=\" Platform</a> for the commercial version of the video generation model </p> ## Model Introduction CogVideoX is an open-source video generation model originating from Qingying. The table below presents information related to the video generation models we offer in this version. <table style=\"border-collapse: collapse; width: 100%;\"> <tr> <th style=\"text-align: center;\">Model Name</th> <th style=\"text-align: center;\">CogVideoX-2B</th> <th style=\"text-align: center;\">CogVideoX-5B</th> <th style=\"text-align: center;\">CogVideoX-5B-I2V (This Repository)</th> </tr> <tr> <td style=\"text-align: center;\">Model Description</td> <td style=\"text-align: center;\">Entry-level model, balancing compatibility. Low cost for running and secondary development.</td> <td style=\"text-align: center;\">Larger model with higher video generation quality and better visual effects.</td> <td style=\"text-align: center;\">CogVideoX-5B image-to-video version.</td> </tr> <tr> <td style=\"text-align: center;\">Inference Precision</td> <td style=\"text-align: center;\"><b>FP16*(recommended)</b>, BF16, FP32, FP8*, INT8, not supported: INT4</td> <td colspan=\"2\" style=\"text-align: center;\"><b>BF16 (recommended)</b>, FP16, FP32, FP8*, INT8, not supported: INT4</td> </tr> <tr> <td style=\"text-align: center;\">Single GPU Memory Usage<br></td> <td style=\"text-align: center;\"><a href=\" FP16: 18GB <br><b>diffusers FP16: from 4GB* </b><br><b>diffusers INT8 (torchao): from 3.6GB*</b></td> <td colspan=\"2\" style=\"text-align: center;\"><a href=\" BF16: 26GB <br><b>diffusers BF16: from 5GB* </b><br><b>diffusers INT8 (torchao): from 4.4GB*</b></td> </tr> <tr> <td style=\"text-align: center;\">Multi-GPU Inference Memory Usage</td> <td style=\"text-align: center;\"><b>FP16: 10GB* using diffusers</b><br></td> <td colspan=\"2\" style=\"text-align: center;\"><b>BF16: 15GB* using diffusers</b><br></td> </tr> <tr> <td style=\"text-align: center;\">Inference Speed<br>(Step = 50, FP/BF16)</td> <td style=\"text-align: center;\">Single A100: ~90 seconds<br>Single H100: ~45 seconds</td> <td colspan=\"2\" style=\"text-align: center;\">Single A100: ~180 seconds<br>Single H100: ~90 seconds</td> </tr> <tr> <td style=\"text-align: center;\">Fine-tuning Precision</td> <td style=\"text-align: center;\"><b>FP16</b></td> <td colspan=\"2\" style=\"text-align: center;\"><b>BF16</b></td> </tr> <tr> <td style=\"text-align: center;\">Fine-tuning Memory Usage</td> <td style=\"text-align: center;\">47 GB (bs=1, LORA)<br> 61 GB (bs=2, LORA)<br> 62GB (bs=1, SFT)</td> <td style=\"text-align: center;\">63 GB (bs=1, LORA)<br> 80 GB (bs=2, LORA)<br> 75GB (bs=1, SFT)<br></td> <td style=\"text-align: center;\">78 GB (bs=1, LORA)<br> 75GB (bs=1, SFT, 16GPU)<br></td> </tr> <tr> <td style=\"text-align: center;\">Prompt Language</td> <td colspan=\"3\" style=\"text-align: center;\">English*</td> </tr> <tr> <td style=\"text-align: center;\">Maximum Prompt Length</td> <td colspan=\"3\" style=\"text-align: center;\">226 Tokens</td> </tr> <tr> <td style=\"text-align: center;\">Video Length</td> <td colspan=\"3\" style=\"text-align: center;\">6 Seconds</td> </tr> <tr> <td style=\"text-align: center;\">Frame Rate</td> <td colspan=\"3\" style=\"text-align: center;\">8 Frames / Second</td> </tr> <tr> <td style=\"text-align: center;\">Video Resolution</td> <td colspan=\"3\" style=\"text-align: center;\">720 x 480, no support for other resolutions (including fine-tuning)</td> </tr> <tr> <td style=\"text-align: center;\">Position Embedding</td> <td style=\"text-align: center;\">3d_sincos_pos_embed</td> <td style=\"text-align: center;\">3d_rope_pos_embed</td> <td style=\"text-align: center;\">3d_rope_pos_embed + learnable_pos_embed</td> </tr> </table> **Data Explanation** + While testing using the diffusers library, all optimizations included in the diffusers library were enabled. This scheme has not been tested for actual memory usage on devices outside of **NVIDIA A100 / H100** architectures. Generally, this scheme can be adapted to all **NVIDIA Ampere architecture** and above devices. If optimizations are disabled, memory consumption will multiply, with peak memory usage being about 3 times the value in the table. However, speed will increase by about 3-4 times. You can selectively disable some optimizations, including: + For multi-GPU inference, the optimization needs to be disabled. + Using INT8 models will slow down inference, which is done to accommodate lower-memory GPUs while maintaining minimal video quality loss, though inference speed will significantly decrease. + The CogVideoX-2B model was trained in precision, and all CogVideoX-5B models were trained in precision. We recommend using the precision in which the model was trained for inference. + PytorchAO and Optimum-quanto can be used to quantize the text encoder, transformer, and VAE modules to reduce the memory requirements of CogVideoX. This allows the model to run on free T4 Colabs or GPUs with smaller memory! Also, note that TorchAO quantization is fully compatible with , which can significantly improve inference speed. FP8 precision must be used on devices with NVIDIA H100 and above, requiring source installation of , , , and Python packages. CUDA 12.4 is recommended. + The inference speed tests also used the above memory optimization scheme. Without memory optimization, inference speed increases by about 10%. Only the version of the model supports quantization. + The model only supports English input; other languages can be translated into English for use via large model refinement. + The memory usage of model fine-tuning is tested in an environment, and the program automatically uses optimization. If a specific number of GPUs is marked in the table, that number or more GPUs must be used for fine-tuning. **Reminders** + Use SAT for inference and fine-tuning SAT version models. Feel free to visit our GitHub for more details. ## Getting Started Quickly ü§ó This model supports deployment using the Hugging Face diffusers library. You can follow the steps below to get started. **We recommend that you visit our GitHub to check out prompt optimization and conversion to get a better experience.** 1. Install the required dependencies 2. Run the code ## Quantized Inference PytorchAO and Optimum-quanto can be used to quantize the text encoder, transformer, and VAE modules to reduce CogVideoX's memory requirements. This allows the model to run on free T4 Colab or GPUs with lower VRAM! Also, note that TorchAO quantization is fully compatible with , which can significantly accelerate inference. Additionally, these models can be serialized and stored using PytorchAO in quantized data types to save disk space. You can find examples and benchmarks at the following links: - torchao - quanto ## Further Exploration Feel free to enter our GitHub, where you'll find: 1. More detailed technical explanations and code. 2. Optimized prompt examples and conversions. 3. Detailed code for model inference and fine-tuning. 4. Project update logs and more interactive opportunities. 5. CogVideoX toolchain to help you better use the model. 6. INT8 model inference code. ## Model License This model is released under the CogVideoX LICENSE. ## Citation",
    "model_explanation_gemini": "Generates videos from input images with high-quality visual effects."
}