{
    "model_id": "colbert-ir/colbertv2.0",
    "downloads": 1488481,
    "tags": [
        "transformers",
        "pytorch",
        "onnx",
        "safetensors",
        "bert",
        "ColBERT",
        "en",
        "arxiv:2004.12832",
        "arxiv:2007.00814",
        "arxiv:2101.00436",
        "arxiv:2112.01488",
        "arxiv:2205.09707",
        "license:mit",
        "endpoints_compatible",
        "region:us"
    ],
    "description": "--- license: mit language: - en tags: - ColBERT --- <p align=\"center\"> <img align=\"center\" src=\" width=\"430px\" /> </p> <p align=\"left\"> # ColBERT (v2) ### ColBERT is a _fast_ and _accurate_ retrieval model, enabling scalable BERT-based search over large text collections in tens of milliseconds. <img align=\"center\" src=\" /> <p align=\"center\"> <img align=\"center\" src=\" /> </p> <p align=\"center\"> <b>Figure 1:</b> ColBERT's late interaction, efficiently scoring the fine-grained similarity between a queries and a passage. </p> As Figure 1 illustrates, ColBERT relies on fine-grained **contextual late interaction**: it encodes each passage into a **matrix** of token-level embeddings (shown above in blue). Then at search time, it embeds every query into another matrix (shown in green) and efficiently finds passages that contextually match the query using scalable vector-similarity () operators. These rich interactions allow ColBERT to surpass the quality of _single-vector_ representation models, while scaling efficiently to large corpora. You can read more in our papers: * **ColBERT: Efficient and Effective Passage Search via Contextualized Late Interaction over BERT** (SIGIR'20). * **Relevance-guided Supervision for OpenQA with ColBERT** (TACL'21). * **Baleen: Robust Multi-Hop Reasoning at Scale via Condensed Retrieval** (NeurIPS'21). * **ColBERTv2: Effective and Efficient Retrieval via Lightweight Late Interaction** (NAACL'22). * **PLAID: An Efficient Engine for Late Interaction Retrieval** (CIKM'22). ---- ## ðŸš¨ **Announcements** * (1/29/23) We have merged a new index updater feature and support for additional Hugging Face models! These are in beta so please give us feedback as you try them out. * (1/24/23) If you're looking for the **DSP** framework for composing ColBERTv2 and LLMs, it's at: ---- ## ColBERTv1 The ColBERTv1 code from the SIGIR'20 paper is in the branch. See here for more information on other branches. ## Installation ColBERT requires Python 3.7+ and Pytorch 1.9+ and uses the Hugging Face Transformers library. We strongly recommend creating a conda environment using the commands below. (If you don't have conda, follow the official conda installation guide.) We have also included a new environment file specifically for CPU-only environments (), but note that if you are testing CPU execution on a machine that includes GPUs you might need to specify as part of your command. Note that a GPU is required for training and indexing. If you face any problems, please open a new issue and we'll help you promptly! ## Overview Using ColBERT on a dataset typically involves the following steps. **Step 0: Preprocess your collection.** At its simplest, ColBERT works with tab-separated (TSV) files: a file (e.g., ) will contain all passages and another (e.g., ) will contain a set of queries for searching the collection. **Step 1: Download the pre-trained ColBERTv2 checkpoint.** This checkpoint has been trained on the MS MARCO Passage Ranking task. You can also _optionally_ train your own ColBERT model. **Step 2: Index your collection.** Once you have a trained ColBERT model, you need to index your collection to permit fast retrieval. This step encodes all passages into matrices, stores them on disk, and builds data structures for efficient search. **Step 3: Search the collection with your queries.** Given the model and index, you can issue queries over the collection to retrieve the top-k passages for each query. Below, we illustrate these steps via an example run on the MS MARCO Passage Ranking task. ## API Usage Notebook **NEW**: We have an experimental notebook on Google Colab that you can use with free GPUs. Indexing 10,000 on the free Colab T4 GPU takes six minutes. This Jupyter notebook **docs/intro.ipynb notebook** illustrates using the key features of ColBERT with the new Python API. It includes how to download the ColBERTv2 model checkpoint trained on MS MARCO Passage Ranking and how to download our new LoTTE benchmark. ## Data This repository works directly with a simple **tab-separated file** format to store queries, passages, and top-k ranked lists. * Queries: each line is . * Collection: each line is . * Top-k Ranking: each line is . This works directly with the data format of the MS MARCO Passage Ranking dataset. You will need the training triples (), the official top-1000 ranked lists for the dev set queries (), and the dev set relevant passages (). For indexing the full collection, you will also need the list of passages (). ## Indexing For fast retrieval, indexing precomputes the ColBERT representations of passages. Example usage: ## Retrieval We typically recommend that you use ColBERT for **end-to-end** retrieval, where it directly finds its top-k passages from the full collection: You can optionally specify the , , and search hyperparameters to trade off between speed and result quality. Defaults for different values of are listed in colbert/searcher.py. We can evaluate the MSMARCO rankings using the following command: ## Training We provide a pre-trained model checkpoint, but we also detail how to train from scratch here. Note that this example demonstrates the ColBERTv1 style of training, but the provided checkpoint was trained with ColBERTv2. Training requires a JSONL triples file with a list per line. The query IDs and passage IDs correspond to the specified and files respectively. Example usage (training on 4 GPUs): ## Running a lightweight ColBERTv2 server We provide a script to run a lightweight server which serves k (upto 100) results in ranked order for a given search query, in JSON format. This script can be used to power DSP programs. To run the server, update the environment variables and in the file to point to the appropriate ColBERT index. The run the following command: A sample query: ## Branches ### Supported branches * []( Stable branch with ColBERTv2 + PLAID. * []( Legacy branch for ColBERTv1. ### Deprecated branches * []( Base ColBERTv2 implementation. * []( ColBERTv2 implementation with CPU search support. * []( ColBERTv2 implementation with PLAID. * []( ColBERT with a baseline binarization-based compression strategy (as opposed to ColBERTv2's residual compression, which we found to be more robust). ## Acknowledgments ColBERT logo designed by Chuyi Zhang.",
    "model_explanation_gemini": "ColBERTv2 is a fast, scalable retrieval model using contextual late interaction over BERT embeddings for accurate search over large text collections."
}