{
    "model_id": "microsoft/rad-dino",
    "downloads": 254092,
    "tags": [
        "transformers",
        "safetensors",
        "dinov2",
        "image-feature-extraction",
        "arxiv:2311.13668",
        "arxiv:1910.09700",
        "doi:10.57967/hf/3050",
        "license:other",
        "endpoints_compatible",
        "region:us"
    ],
    "description": "--- license: other license_name: msrla license_link: library_name: transformers pipeline_tag: image-feature-extraction --- # Model card for RAD-DINO <!-- Provide a quick summary of what the model is/does. --> ## Model description <!-- Provide a longer summary of what this model is. --> RAD-DINO is a vision transformer model trained to encode chest X-rays using the self-supervised learning method DINOv2. RAD-DINO is described in detail in Exploring Scalable Medical Image Encoders Beyond Text Supervision (F. Pérez-García, H. Sharma, S. Bond-Taylor, et al., 2024). - **Developed by:** Microsoft Health Futures - **Model type:** Vision transformer - **License:** MSRLA - **Finetuned from model:** []( ## Uses <!-- Address questions around how the model is intended to be used, including the foreseeable users of the model and those affected by the model. --> RAD-DINO is shared for research purposes only. It is **not meant to be used for clinical practice**. <!-- ### Downstream use --> <!-- This section is for the model use when fine-tuned for a task, or when plugged into a larger ecosystem/app --> The model is a vision backbone that can be plugged to other models for downstream tasks. Some potential uses are: - Image classification, with a classifier trained on top of the token - Image segmentation, with a decoder trained using the patch tokens - Clustering, using the image embeddings directly - Image retrieval, using nearest neighbors of the CLS token - Report generation, with a language model to decode text Fine-tuning RAD-DINO is typically not necessary to obtain good performance in downstream tasks. <!-- ### Out-of-scope use --> <!-- This section addresses misuse, malicious use, and uses that the model will not work well for. --> ## Biases, risks, and limitations <!-- This section is meant to convey both technical and sociotechnical limitations. --> RAD-DINO was trained with data from three countries, therefore it might be biased towards population in the training data. Underlying biases of the training datasets may not be well characterized. ## Getting started ### Get some data Let us first write an auxiliary function to download a chest X-ray. ### Load the model Now let us download the model and encode an image. ### Encode an image If we are interested in the feature maps, we can reshape the patch embeddings into a grid. We will use []( (install with ) for this. ### Weights for fine-tuning We have released a checkpoint compatible with the original DINOv2 code to help researchers fine-tune our model. First, let us write code to load a checkpoint. We can now use the hub model and load the RAD-DINO weights. Let's clone the DINOv2 repository so we can import the code for the head. The weights of the head are also released: ### Configs and augmentation The configuration files [](./ssl_default_config.yaml) and [](./vitb14_cxr.yaml), and the [](./augmentations.py) module are also available in the repository to help researchers reproduce the training procedure with our hyperparameters. ## Training details ### Training data <!-- This should link to a Dataset Card, perhaps with a short stub of information on what the training data is all about as well as documentation related to data pre-processing or additional filtering. --> We used images from five public, deidentified chest X-ray datasets to train this checkpoint of RAD-DINO. | Dataset | Num. images | | --------- | ----------: | | MIMIC-CXR | 368 960 | | CheXpert | 223 648 | | NIH-CXR | 112 120 | | PadChest | 136 787 | | BRAX | 41 260 | | **TOTAL** | 882 775 | Images in the validation and test sets used to train MAIRA were excluded from the training set of RAD-DINO. The list of image files used for training is available at [](./training_images.csv). Note this checkpoint is different from the one in the paper, where some private data was used (and fewer GPUs). The checkpoint shared here is trained for 35 000 iterations (the total number of iterations in the run was 100 000, but we selected this checkpoint using linear probing on the validation sets of the evaluation datasets described in the paper). We used 16 nodes with 4 A100 GPUs each, and a batch size of 40 images per GPU. ### Training procedure <!-- This relates heavily to the Technical Specifications. Content here should link to that section when it is relevant to the training procedure. --> We refer to the manuscript for a detailed description of the training procedure. #### Preprocessing All DICOM files were resized using B-spline interpolation so that their shorter size was 518, min-max scaled to [0, 255], and stored as PNG files. #### Training hyperparameters - **Training regime:** fp16 using PyTorch-FSDP mixed-precision. <!--fp32, fp16 mixed precision, bf16 mixed precision, bf16 non-mixed precision, fp16 non-mixed precision, fp8 mixed precision --> ## Evaluation <!-- This section describes the evaluation protocols and provides the results. --> Our evaluation is best described in the manuscript. ## Environmental impact <!-- Total emissions (in grams of CO2eq) and additional considerations, such as electricity usage, go here. Edit the suggested text below accordingly --> <!-- Carbon emissions can be estimated using the Machine Learning Impact calculator presented in Lacoste et al. (2019). --> <!-- Hardware type: A100 PCIe --> <!-- Hours: 1d 16h = 40h --> <!-- Cloud provider: Azure --> <!-- Region: Italy North --> - **Hardware type:** NVIDIA A100 GPUs - **Hours used:** 40 hours/GPU × 16 nodes × 4 GPUs/node = 2560 GPU-hours - **Cloud provider:** Azure - **Compute region:** West US 2 - **Carbon emitted:** 222 kg CO₂ eq. ### Compute infrastructure RAD-DINO was trained on Azure Machine Learning. #### Hardware We used 16 nodes with four NVIDIA A100 (80 GB) GPUs each. #### Software We leveraged the code in DINOv2 for training. We used SimpleITK and Pydicom for processing of DICOM files. ## Citation <!-- If there is a paper or blog post introducing the model, the APA and Bibtex information for that should go in this section. --> **BibTeX:** **APA:** > Pérez-García, F., Sharma, H., Bond-Taylor, S., Bouzid, K., Salvatelli, V., Ilse, M., Bannur, S., Castro, D. C., Schwaighofer, A., Lungren, M. P., Wetscherek, M. T., Codella, N., Hyland, S. L., Alvarez-Valle, J., & Oktay, O. (2025). *Exploring scalable medical image encoders beyond text supervision*. In Nature Machine Intelligence. Springer Science and Business Media LLC. ## Model card contact Fernando Pérez-García ([](mailto:fperezgarcia@microsoft.com)).",
    "model_explanation_gemini": "A vision transformer model trained with DINOv2 to encode chest X-rays for research purposes like classification, segmentation, and retrieval, but not for clinical use."
}